<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://goroyal.github.io</id>
    <title>行知其远</title>
    <updated>2020-12-30T15:00:38.417Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://goroyal.github.io"/>
    <link rel="self" href="https://goroyal.github.io/atom.xml"/>
    <subtitle>鲲之大，不知其几千里。</subtitle>
    <logo>https://goroyal.github.io/images/avatar.png</logo>
    <icon>https://goroyal.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 行知其远</rights>
    <entry>
        <title type="html"><![CDATA[Java反射]]></title>
        <id>https://goroyal.github.io/post/java-reflection/</id>
        <link href="https://goroyal.github.io/post/java-reflection/">
        </link>
        <updated>2020-12-30T14:30:43.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java面向对象三大特性]]></title>
        <id>https://goroyal.github.io/post/java-ooo/</id>
        <link href="https://goroyal.github.io/post/java-ooo/">
        </link>
        <updated>2020-12-30T14:29:58.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="引言">引言</h2>
<p>传统的结构化程序设计通过设计一系列的过程（即算法）来求解问题。这些过程一旦被确定，就要开始考虑存储数据的方式。Pascak语言的设计者Niklaus Wirth将程序定义为算法+数据结构，算法是第一位的，数据结构是第二位的。这明确表述了程序员的工作方式：首先要确定如何操作数据，然后再考虑如何组织数据，以便于数据操作。而面向对象程序设计却将数据放在第一位，然后再考虑操作数据的算法。<br>
面向对象程序设计是当今主流的程序设计范型之一，Java是完全面向对象的语言。面向对象的程序是由对象组成的，每个对象包含对用户公开的特定部分和隐藏的实现部分。在Java的面向对象概念中，有三大特性，分别是封装、继承、多态。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="引言">引言</h2>
<p>传统的结构化程序设计通过设计一系列的过程（即算法）来求解问题。这些过程一旦被确定，就要开始考虑存储数据的方式。Pascak语言的设计者Niklaus Wirth将程序定义为算法+数据结构，算法是第一位的，数据结构是第二位的。这明确表述了程序员的工作方式：首先要确定如何操作数据，然后再考虑如何组织数据，以便于数据操作。而面向对象程序设计却将数据放在第一位，然后再考虑操作数据的算法。<br>
面向对象程序设计是当今主流的程序设计范型之一，Java是完全面向对象的语言。面向对象的程序是由对象组成的，每个对象包含对用户公开的特定部分和隐藏的实现部分。在Java的面向对象概念中，有三大特性，分别是封装、继承、多态。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[代码模块化重构]]></title>
        <id>https://goroyal.github.io/post/code-modularization-refactor/</id>
        <link href="https://goroyal.github.io/post/code-modularization-refactor/">
        </link>
        <updated>2020-12-11T05:10:03.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="为什么要做模块化">为什么要做模块化</h2>
<p>我们都知道代码设计有个原则：不要重复你自己。代码要尽可能的被复用。对于同一个功能，当它第一次被写出来后，其他模块会去引用它。随着时间的推移，每个模块都有自己的一些功能点被其他模块调用，甚至作为基础的框架层还会去调用业务层的代码（比如注册实现、框架针对特定业务的需求对一些功能做定制）。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="为什么要做模块化">为什么要做模块化</h2>
<p>我们都知道代码设计有个原则：不要重复你自己。代码要尽可能的被复用。对于同一个功能，当它第一次被写出来后，其他模块会去引用它。随着时间的推移，每个模块都有自己的一些功能点被其他模块调用，甚至作为基础的框架层还会去调用业务层的代码（比如注册实现、框架针对特定业务的需求对一些功能做定制）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微服务与SOA架构对比]]></title>
        <id>https://goroyal.github.io/post/microservice-and-soa/</id>
        <link href="https://goroyal.github.io/post/microservice-and-soa/">
        </link>
        <updated>2020-12-11T05:08:53.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java ClassLoader和双亲委派模型]]></title>
        <id>https://goroyal.github.io/post/classloader/</id>
        <link href="https://goroyal.github.io/post/classloader/">
        </link>
        <updated>2020-12-11T05:00:29.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web开发中的日志]]></title>
        <id>https://goroyal.github.io/post/log/</id>
        <link href="https://goroyal.github.io/post/log/">
        </link>
        <updated>2020-12-11T04:55:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="引言">引言</h2>
<p>在Web开发中，日志主要是用来做：</p>
<ul>
<li>问题分析和研究</li>
<li>监控系统活动</li>
<li>监控系统状态变化</li>
</ul>
<p>Web应用里的所有日志必须是一致的、简洁的，有丰富的上下文且有相应的标识。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="引言">引言</h2>
<p>在Web开发中，日志主要是用来做：</p>
<ul>
<li>问题分析和研究</li>
<li>监控系统活动</li>
<li>监控系统状态变化</li>
</ul>
<p>Web应用里的所有日志必须是一致的、简洁的，有丰富的上下文且有相应的标识。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java泛型]]></title>
        <id>https://goroyal.github.io/post/java-generic-type/</id>
        <link href="https://goroyal.github.io/post/java-generic-type/">
        </link>
        <updated>2020-12-11T04:53:28.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[【数据结构】树]]></title>
        <id>https://goroyal.github.io/post/tree/</id>
        <link href="https://goroyal.github.io/post/tree/">
        </link>
        <updated>2020-12-11T04:51:49.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Column Table & Row Table]]></title>
        <id>https://goroyal.github.io/post/column-row-table/</id>
        <link href="https://goroyal.github.io/post/column-row-table/">
        </link>
        <updated>2020-12-10T15:31:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kafka语义]]></title>
        <id>https://goroyal.github.io/post/kafka-semantics/</id>
        <link href="https://goroyal.github.io/post/kafka-semantics/">
        </link>
        <updated>2020-12-10T15:28:39.000Z</updated>
    </entry>
</feed>